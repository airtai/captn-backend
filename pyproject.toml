[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "captn"
description = "Python client to interact with captn services"
# readme = "README.md"
authors = [
    { name = "airt", email = "info@airt.ai" },
]

keywords = ["captn", "autogen"]

requires-python = ">=3.8"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
]

dynamic = ["version"]

dependencies = [
    "requests>=2.20.0,<3.0.0",
]

[project.optional-dependencies]

# dev dependencies
lint = [
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-Pygments",
    "types-docutils",
    "types-requests",
    "mypy==1.9.0",
    "black==24.3.0",
    "isort>=5",
    "ruff==0.3.4",
    "pyupgrade-directories",
    "bandit==1.7.8",
    "semgrep==1.66.0",
    "pre-commit==3.6.2",
    "detect-secrets==1.4.0",
]

test-core = [
    "coverage[toml]>=7.2,<8",
    "pytest==7.4.4,<8",
    "pytest-asyncio>=0.21",
    "dirty-equals==0.7.1.post0",
    "pyarrow==15.0.1",
    "tabulate==0.9.0",
    "pytest-retry==1.6.2",
]

testing = [
    "captn[test-core]",
    "watchfiles",
    "pytest-recording",
    "freezegun"
]

agents = [
    "fastapi==0.110.0",
    "APScheduler==3.10.4",
    "prisma==0.12.0",
    "google-ads==23.1.0",
    "httpx==0.27.0",
    "uvicorn==0.29.0",
    "python-dotenv==1.0.1",
    "pyautogen[websurfer,websockets] @ git+https://github.com/microsoft/autogen.git@3a82f35",
    #"pyautogen[websurfer]==0.2.9",

    "pandas>=2.1",
    "fastcore==1.5.29",
    "asyncer==0.0.5",
    "pydantic==2.6.4",
    "markdownify==0.11.6",
    "tenacity==8.2.3",
    "prometheus-client==0.19.0",
    "opentelemetry-distro==0.43b0",
    "opentelemetry-instrumentation-fastapi==0.43b0",
    "opentelemetry-instrumentation-logging==0.43b0",
    "opentelemetry-exporter-otlp==1.22.0",
]
dev = [
    "captn[lint,testing,agents]",
]


[project.urls]
Homepage = "https://github.com/airtai/captn-backend"
Documentation = "https://github.com/airtai/captn-backend"
Tracker = "https://github.com/airtai/captn-backend/issues"
Source = "https://github.com/airtai/captn-backend"

[tool.hatch.version]
path = "captn/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
skip-excluded-dirs = true
exclude = [
    "/tests",
    "/docs",
]

[tool.mypy]
strict = true
python_version = "3.8"
ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = [
    "pydantic.mypy"
]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.isort]
profile = "black"
known_first_party = ["captn"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]

minversion = "7.0"

addopts = "-q -m 'not slow'"

testpaths = [
    "tests",
]

markers = [
    "openai: mark test as using openai.",
]

# needed for pytest-retry
retries = 2
retry_delay = 0.5
cumulative_timing = false

[tool.coverage.run]
parallel = true
branch = true
concurrency = [
    "multiprocessing",
    "thread"
]
source = [
    "captn",
    # "tests"
]
context = '${CONTEXT}'
omit = [
    "**/__init__.py",
    "tests/mypy/*",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_lines = [
    ".*# pragma: no cover",
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'raise ValueError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
    '*/annotations.py',
]

[tool.bandit]
